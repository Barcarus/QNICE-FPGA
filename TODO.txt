HARDWARE:

* Refactor MMIO for not having so many comperators: use only one register
  output and link it to all devices; use a smart subtraction to find out
  registers and drastically shorten the code.

* Remove ROM and replace by prefilled RAM

* Have a global constant that reflects the speed of the board and refactor
  all hardcoded frequencies to be dependend formulas from this speed
  (e.g. UART, SD card, VGA, debouncer, etc.)

* Improve design to support 100 MHz

* Keyboard: remove hardcoded hardcoded 18000

* Refactor scancode conversion to be more table/ROM like and less
  like a huge array of multiplexers

* Refactor TIL and TIL Mask to support 8 digits / 32 bits

* Refactor Video RAM: avoid inferring two RAMs for video RAM

* VGA being able to report the vertical retrace for flicker-free graphics,
  e.g. for being able to enhance Q-TRIS to work double-buffered and to
  switch buffers during retrace. And/or for having a good general sync.
  mechanism. To "report" via register and/or interrupt.

* Memory management unit (more than 64kWords of RAM/ROM, pages, etc.)

* Interrupt system

* Debugging mechanisms (e.g. single-step mode in hardware)

MONITOR and/or STANDARD LIBs:

* Backspace and CTRL-U support in IO$GETS

* Basic mathematical routines * (exists), / (from decimal.asm?), % (ditto?)

* Decimal converter (from decimal.asm?)

* 32 bit arithmetic

* Long term: Floating point support

ASSEMBLER:

* Issue a warning, when defining a label multiple times.
