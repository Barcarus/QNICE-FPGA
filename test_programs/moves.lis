000001                    ; MOVE and register unit tests including bank switching and some flag tests
000002                    
000003                    ; in both cases, R14 should be 0x0009, i.e. Z and 1 flag set
000004                    ; as you cannot clear the status register
000005  0000  0F80  0000          MOVE 0x0000, R0             ; first try using a register to register operation, so lead R0 ...
000006  0002  0038                MOVE R0, R14             ; ... and store it to R14
000007                    
000008  0003  0F84  0001          MOVE 1, R1               ; dummy operation to clear the Z flag, i.e. SR should be 1 right now
000009                    
000010                    N32768  .EQU 0x8000              ; 2-complement of -32768 as the assembler is not supporting negatives
000011                    N2      .EQU 0xFFFE              ; 2-complement of -2
000012                    
000013  0005  0F88  FFFF          MOVE 0xFFFF, R2          ; dummy operation to set the X flag and N flag, i.e. SR should be 0x13 right now
000014  0007  0F8C  8000          MOVE N32768, R3          ; prepare overflow, N flag is set, SR should be 0x11 now
000015  0009  0F90  FFFE          MOVE N2, R4              ; second component for overflow, SR stays 0x11
000016  000B  1310                ADD R3, R4               ; R4 should be 0x7FFE now and the C and V flag should be set, i.e. SR should be 0x25
000017                    
000018  000C  0FB8  0000          MOVE 0x0000, R14         ; second try use a @R15++ operation, SR should be 9 afterwards
000019                    
000020                    
000021                    ; check memory reading and register bank switching
000022  000E  FF80  0014          ABRA NEXT1, 1
000023                    
000024                    BANK    .EQU 0x0100             ; this adds 1 to the upper 8 bit, i.e. can be used for bank switching
000025                    
000026  0010  0041        DATA    .ASCII_W "ABC"
        0011  0042
        0012  0043
        0013  0000
000027                    
000028  0014  0FA8  0010  NEXT1   MOVE DATA, R10          ; upper register bank
000029                    
000030  0016  1FB8  0100          ADD BANK, R14           ; next register bank via @R15++ operation
000031  0018  0F80  0001          MOVE 1, R0
000032  001A  0F84  0002          MOVE 2, R1
000033  001C  0F88  0003          MOVE 3, R2              ; after this, (R0, R1, R2) must be (1, 2, 3) in bank #1
000034                    
000035  001E  0FAC  0100          MOVE BANK, R11          ; next register bank via register to register operation
000036  0020  1B38                ADD R11, R14            ; after this, the current bank should be #2
000037                    
000038  0021  0A80                MOVE @R10++, R0
000039  0022  0A84                MOVE @R10++, R1
000040  0023  0A88                MOVE @R10++, R2
000041  0024  3AC8                SUB @--R10, R2          ; after this, (R0, R1, R2) must be (0x41, 0x42, 0x00) in bank #2
000042                    
000043  0025  1B38                ADD R11, R14
000044  0026  0F9C  2309          MOVE 0x2309, R7
000045  0028  0718                MOVE R7, R6             ; R7 and R6 shall contain 0x2309 in bank #3
000046                    
000047  0029  0F84  0000          MOVE 0, R1
000048  002B  AFB8  0004          OR 4, R14               ; set carry, SR = 0x305
000049  002D  2F84  0001          ADDC 1, R1              ; R1 shall be 2, carry cleared afterwards therefore SR = 1
000050                    
000051  002F  3FB8  0100          SUB BANK, R14           ; switch bank to bank #2
000052  0031  0A48                MOVE @R10, R2           ; after this (R0, R1, R2) must be (0x41, 0x42, 0x43)
000053                    
000054  0032  E000                HALT


EQU-list:
--------------------------------------------------------------------------------------------------------
N32768                  : 0x8000    N2                      : 0xFFFE    BANK                    : 0x0100    

Label-list:
--------------------------------------------------------------------------------------------------------
DATA                    : 0x0010    NEXT1                   : 0x0014    
